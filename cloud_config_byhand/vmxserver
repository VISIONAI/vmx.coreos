#cloud-config

coreos:
  etcd:
    #new url for each cluster: https://discovery.etcd.io/new
    discovery: https://discovery.etcd.io/664ae47bfb6711b0de13ad62ecda5685
    addr: $private_ipv4:4001
    peer-addr: $private_ipv4:7001
  fleet:
    public-ip: $private_ipv4   # used for fleetctl ssh command
  units:
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
    - name: mcr.service
      command: start
      content: |
        Description=Matlab MCR
        
        # Requirements
        Requires=etcd.service
        Requires=docker.service
        
        # Dependency ordering
        After=etcd.service
        After=docker.service
        
        [Service]
        # Let processes take awhile to start up (for first run Docker containers)
        TimeoutStartSec=0
        
        # work correctly.
        KillMode=none
        
        # Get CoreOS environmental variables
        EnvironmentFile=/etc/environment
        
        # Pre-start and Start
        ExecStartPre=-/usr/bin/docker kill vmxmcr
        ExecStartPre=-/usr/bin/docker rm vmxmcr
        ExecStartPre=/usr/bin/docker pull visionai/mcr-2014a
        ExecStart=/usr/bin/docker run -d --name vmxmcr visionai/mcr-2014a
        
        # Stop
        ExecStop=/usr/bin/docker stop vmxmcr

    - name: vmxserver-discovery@.service
      command: start
      content: |
        Description=VMX Server Discovery
        
        # Requirements
        Requires=etcd.service
        Requires=docker.service
        Requires=mcr.service
        Requires=vmxserver.%i.service
        
        # Dependency ordering
        After=etcd.service
        After=docker.service
        After=mcr.service
        After=vmxserver.%i.service
        
        [Service]
        # Let processes take awhile to start up (for first run Docker containers)
        TimeoutStartSec=0
        
        # work correctly.
        KillMode=none
        
        # Get CoreOS environmental variables
        EnvironmentFile=/etc/environment
        
        # Pre-start and Start
        ExecStart=/bin/bash -c '\
            while true; do \
                etcdctl set /vmxserver/available/${COREOS_PRIVATE_IPV4} \'port:%i\' --ttl 30; \
              # should actually check it's alive
              sleep 20; \
            done'
        # Stop
        ExecStop=/usr/bin/etcdctl rm /vmxserver/available/${COREOS_PRIVATE_IPV4}
        
        [X-Fleet]
        # Schedule on the same machine as the associated Middle Service
        X-ConditionMachineOf=vmxserver.%i.service
    - name: vmxserver@.service
      command: start
      content: |
        Description=VMX Server
        
        # Requirements
        Requires=etcd.service
        Requires=docker.service
        Requires=mcr.service
        Requires=vmxserver-discovery.%i.service
        
        # Dependency ordering
        After=etcd.service
        After=docker.service
        After=mcr.service
        Before=vmxserver-discovery.%i.service
        
        [Service]
        # Let processes take awhile to start up (for first run Docker containers)
        TimeoutStartSec=0
        
        # work correctly.
        KillMode=none
        
        # Get CoreOS environmental variables
        EnvironmentFile=/etc/environment
        
        # Pre-start and Start
        ExecStartPre=-/usr/bin/docker kill vmxservernode-%i
        ExecStartPre=-/usr/bin/docker rm vmxservernode-%i
        ExecStartPre=/usr/bin/docker pull visionai/vmx-server-node
        ExecStart=/usr/bin/docker run -t    --volumes-from vmxmcr    --volumes-from vmxuserdata     -p ${COREOS_PRIVATE_IPV4}:%i:%i   --name vmxservernode-%i          --rm                               visionai/vmx-server-node /vmx/build/vmxserver /vmx/build %i
        # Stop
        ExecStop=/usr/bin/docker stop vmxenvironment
        
        [X-Fleet]
        # Schedule on the same machine as the associated Middle Service
        X-ConditionMachineOf=middledata.service
